#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

bool bfs(vector<vector<pair<int, int>>>& adjList, vector<int>& parent, vector<bool>& visited, int source, int destination) {
    int numVertices = adjList.size();
    queue<int> q;
    q.push(source);
    visited[source] = true;
    parent[source] = -1;

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (const auto& edge : adjList[u]) {
            int v = edge.first;
            int capacity = edge.second;

            if (!visited[v] && capacity > 0) {
                q.push(v);
                visited[v] = true;
                parent[v] = u;
            }
        }
    }
    return visited[destination];
}

int fordFulkerson(vector<vector<pair<int, int>>>& adjList, int source, int destination) {
    int numVertices = adjList.size();

    vector<int> parent(numVertices, -1);
    vector<bool> visited(numVertices, false);

    int maxFlow = 0;

    while (bfs(adjList, parent, visited, source, destination)) {
        int minCapacity = numeric_limits<int>::max();
        int v = destination;
        while (v != source) {
            int u = parent[v];
            for (const auto& edge : adjList[u]) {
                if (edge.first == v) {
                    minCapacity = min(minCapacity, edge.second);
                    break;
                }
            }
            v = u;
        }

        v = destination;
        while (v != source) {
            int u = parent[v];
            for (auto& edge : adjList[u]) {
                if (edge.first == v) {
                    edge.second -= minCapacity;  // Update forward edge
                    break;
                }
            }
            bool reverseEdgeFound = false;
            for (auto& edge : adjList[v]) {
                if (edge.first == u) {
                    edge.second += minCapacity;  // Update reverse edge
                    reverseEdgeFound = true;
                    break;
                }
            }
            if (!reverseEdgeFound) {
                adjList[v].emplace_back(make_pair(u, minCapacity));
                adjList[u].emplace_back(make_pair(v, 0));
            }
            v = u;
        }
        maxFlow += minCapacity;

        fill(parent.begin(), parent.end(), -1);
        fill(visited.begin(), visited.end(), false);
    }
    return maxFlow;
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        cout << "Parametrii insuficienti" << endl;
        return 1;
    }
    ifstream f(argv[1]);
    if (!f) {
        cout << "Fisierul nu a putut fi deschis" << endl;
        return 1;
    }
    ofstream g(argv[2]);

    int nrVarfuri, nrMuchii;
    f >> nrVarfuri >> nrMuchii;

    vector<vector<pair<int, int>>> adjList(nrVarfuri);
    for (int i = 0; i < nrMuchii; ++i) {
        int u, v, capacity;
        f >> u >> v >> capacity;
        adjList[u].emplace_back(v, capacity);
        adjList[v].emplace_back(u, 0);
    }

    int sursa = 0, destinatie = nrVarfuri - 1;

    cout << fordFulkerson(adjList, sursa, destinatie) << endl;

    f.close();
    g.close();
    return 0;
}