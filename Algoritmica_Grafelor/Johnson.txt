struct myComp {
    constexpr bool operator()(
            pair<int, int> const& a,
            pair<int, int> const& b)
    const noexcept
    {
        return a.second > b.second;
    }
};

void Dijkstra(const vector<vector<pair<int,int>>>& listaAdj, vector<int>& drumuriCostMinim, int nrVarfuri, int nodSursa){
    drumuriCostMinim[nodSursa] = 0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, myComp> pq;
    vector<bool> vizitat(nrVarfuri, false);

    pq.push({nodSursa, 0});

    while (!pq.empty()){
        int varf = pq.top().first;
        pq.pop();
        if (vizitat[varf])
            continue;
        vizitat[varf] = true;
        for (auto& vecin : listaAdj[varf]){
            if (drumuriCostMinim[vecin.first] > drumuriCostMinim[varf] + vecin.second){
                drumuriCostMinim[vecin.first] = drumuriCostMinim[varf] + vecin.second;
                pq.push({vecin.first, drumuriCostMinim[vecin.first]});
            }
        }
    }
}

bool BellmanFord(const vector<vector<pair<int,int>>>& listaAdj, vector<int>& distante, int nrVarfuri, int nodSursa){
    distante[nodSursa] = 0;

    for (int i = 0; i < nrVarfuri - 1; ++i)
        for (int j = 0; j < nrVarfuri; ++j)
            for (auto& vecin : listaAdj[j])
                if (distante[vecin.first] > distante[j] + vecin.second){
                    distante[vecin.first] = distante[j] + vecin.second;
                }

    for (int i = 0; i < nrVarfuri; ++i)
        for (auto& vecin : listaAdj[i])
            if (distante[vecin.first] > distante[i] + vecin.second)
                return false;
    return true;
}

void Reponderare(vector<vector<pair<int,int>>>& listaAdj, vector<int>& distante, int nrVarfuri){
    for (int i = 0; i < nrVarfuri; ++i)
        for (auto& vecin : listaAdj[i])
            vecin.second += distante[i] - distante[vecin.first];
}

int main(int argc, char** argv){
    if (argc < 3){
        cout << "Parametrii in linia de comanda insuficienti\n";
        return 0;
    }

    ifstream f (argv[1]);
    if (!f){
        cout << "Fisierele nu au fost gasite\n";
        return 0;
    }
    ofstream g (argv[2]);

    int nrVarfuri, nrArce;
    f >> nrVarfuri;
    f >> nrArce;

    vector<vector<pair<int,int>>> listaAdj(nrVarfuri);
    vector<int> distante(nrVarfuri, Inf);

    for (int i = 0; i < nrArce; ++i) {
        int varf1, varf2, pondere;
        f >> varf1 >> varf2 >> pondere;
        listaAdj[varf1].push_back({varf2, pondere});
    }

    listaAdj.resize(nrVarfuri + 1);
    for (int i = 0; i < nrVarfuri; ++i) {
        listaAdj[nrVarfuri].push_back({i, 0});
    }

    if(!BellmanFord(listaAdj, distante, nrVarfuri + 1, nrVarfuri)){
        g << -1 << '\n';
        f.close();
        g.close();
        return 0;
    }

    listaAdj.resize(nrVarfuri);

    Reponderare(listaAdj, distante, nrVarfuri);

    for (int i = 0; i < nrVarfuri; ++i)
        for (auto& vecin : listaAdj[i])
            g << i << " " << vecin.first << " " << vecin.second << '\n';

    vector<vector<int>> drumuriCostMinim(nrVarfuri, vector<int>(nrVarfuri, Inf));
    for (int i = 0; i < nrVarfuri; ++i){
        Dijkstra(listaAdj, drumuriCostMinim[i], nrVarfuri, i);
        for (int j = 0; j < nrVarfuri; ++j)
            if (drumuriCostMinim[i][j] != Inf)
                drumuriCostMinim[i][j] += distante[j] - distante[i];
        for (auto& cost : drumuriCostMinim[i]){
            if (cost == Inf)
                g << "INF ";
            else
                g << cost << " ";
        }
        g << '\n';
    }

    f.close();
    g.close();
    return 0;
}