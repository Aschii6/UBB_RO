_program
_program -> _program_start ( ) { _instruction_list }
_program_start -> int main

_instruction_list -> _instruction _instruction_list_p
_instruction_list_p -> _instruction_list
_instruction_list_p -> eps

_instruction -> _declaration ;
_instruction -> _struct_declaration ;
_instruction -> _assigment ;
_instruction -> _io ;
_instruction -> _control
_instruction -> _loop

_declaration -> _type _identifier _declaration_p
_declaration_p -> eps
_declaration_p -> = _expression

_type -> int
_type -> float

_struct_declaration -> struct _identifier { _declaration_list } _identifier

_declaration_list -> _declaration ; _declaration_list_p
_declaration_list_p -> _declaration_list
_declaration_list_p -> eps

_assigment -> _identifier = _expression

_expression -> _term _expression_p
_expression_p -> _op _term _expression_p
_expression_p -> eps

_term -> _identifier
_term -> _constant

_op -> +
_op -> -
_op -> *
_op -> /
_op -> %

_io -> cout << _expression
_io -> cin >> _identifier

_control -> if ( _logical_expression ) { _instruction_list } _control_p
_control_p -> eps
_control_p -> else { _instruction_list }

_loop -> while ( _logical_expression ) { _instruction_list }

_logical_expression -> _expression _logical_expression_p
_logical_expression_p -> _relational_operator _expression _logical_expression_s
_logical_expression_p -> eps
_logical_expression_s -> _logical_operator _logical_expression
_logical_expression_s -> eps

_logical_operator -> &&
_logical_operator -> ||

_relational_operator -> ==
_relational_operator -> !=
_relational_operator -> <=
_relational_operator -> >=
_relational_operator -> <
_relational_operator -> >

_identifier -> ID
_constant -> CONST